<?php

/**
 * @file
 * Contains iq_barrio_theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function iq_barrio_theme($existing, $type, $theme, $path) {
  return [];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_barrio_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter login form and add own custom submit handler.
  $form['#submit'][] = '_iq_barrio_user_login_form_submit';
}

/**
 * Custom submit handler for login form.
 */
function _iq_barrio_user_login_form_submit($form, FormStateInterface $form_state) {
  $form_state->setRedirect('<front>');
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function iq_barrio_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  if (\Drupal::service('theme.manager')->getActiveTheme()->getName() == 'iq_barrio') {
    $styleSettings = \Drupal::config('iq_barrio.settings')->get();
    $service = \Drupal::service('iq_barrio_helper.iq_barrio_service');
    $service->alterThemeSettingsForm($form, $styleSettings);
    $form['#submit'][] = 'iq_barrio_form_system_theme_settings_submit';
  }
}

/**
 * Implements hook_form_system_theme_settings_submit().
 */
function iq_barrio_form_system_theme_settings_submit($form, FormStateInterface &$form_state) {
  $styles = $form_state->getValues();
  foreach ($styles as $stylingKey => $stylingValaue) {
    if ((str_contains($stylingKey, 'opacity')) && !isset($stylingValaue)) {
      $styles[$stylingKey] = 1;
    }
  }
  $themePath = \Drupal::root() . '/' . \Drupal::service('theme_handler')->getTheme('iq_barrio')->getPath();
  $filename = $themePath . "/resources/sass/_definitions.scss";

  $service = \Drupal::service('iq_barrio_helper.iq_barrio_service');
  $service->writeDefinitionsFile($styles, $filename, $themePath . "/resources/sass/_template.scss.txt");
  $service->compile();

  // Call hook.
  \Drupal::moduleHandler()->invokeAll('iq_theme_settings', [$styles, $service]);

  if ($form_state->getValue('reset_css')) {
    $service->resetCss();
  }
}
